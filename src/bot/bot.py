#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram-–±–æ—Ç–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ü–µ—Ä–º—Å–∫–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–ª–ª–µ–¥–∂–∞.
–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, –æ–±—â–µ–∂–∏—Ç–∏—è—Ö –∏ –¥—Ä.
"""

import logging
import os
import sys
import telebot
from telebot import types
from src.utils.constants import TOKEN, MENU_BUTTONS, WELCOME_MESSAGE, ERROR_MESSAGES, USER_AGREEMENT, LICENSE_AGREEMENT
from src.database.database_manager import DatabaseManager
from src.bot.nlp_processor import NLPProcessor
from src.utils import sanitize_input, split_long_message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists('logs'):
    os.makedirs('logs')

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler('logs/bot.log')
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logging.getLogger().addHandler(file_handler)

logger = logging.getLogger(__name__)

class CollegeBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è –∫–æ–ª–ª–µ–¥–∂–∞"""

    def __init__(self, token):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.token = token
        self.bot = telebot.TeleBot(token)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.db = DatabaseManager('data/database.db')

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NLP-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        self.nlp = NLPProcessor()

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states = {}
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö
        self.teacher_display_messages = {}
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –¥–ª—è NLP
        try:
            teachers = self.db.get_teachers()
            # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –∏–∑ –ë–î –≤ NLP-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            self.nlp.set_teacher_surnames(teachers)
            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö: {len(teachers)} –∑–∞–ø–∏—Å–µ–π")
            for teacher in teachers:
                logger.debug(f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.setup_handlers()

        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.bot.message_handler(commands=['start'])(self.start_command)
        self.bot.message_handler(commands=['help'])(self.help_command)
        self.bot.message_handler(commands=['menu'])(self.menu_command)
        self.bot.message_handler(commands=['terms'])(self.terms_command)
        self.bot.message_handler(commands=['license'])(self.license_command)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        self.bot.callback_query_handler(func=lambda call: True)(self.handle_button)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–æ–ø—Ä–æ—Å–æ–≤)
        self.bot.message_handler(func=lambda message: True, content_types=['text'])(self.handle_text_message)

        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    def start_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = message.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Å–æ–≥–ª–∞—à–µ–Ω–∏–π
        try:
            with open('src/agreements/User Agreement.txt', 'rb') as user_agreement:
                self.bot.send_document(
                    message.chat.id,
                    user_agreement,
                    caption="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ"
                )
            with open('src/agreements/License Agreement.txt', 'rb') as license_agreement:
                self.bot.send_document(
                    message.chat.id,
                    license_agreement,
                    caption="–õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ"
                )
        except Exception as e:
            logger.error(f"Error sending agreement files: {e}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º
        agreement_keyboard = types.InlineKeyboardMarkup()
        agreement_keyboard.row(
            types.InlineKeyboardButton("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data='accept_agreement'),
            types.InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data='decline_agreement')
        )

        agreement_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–º —Å–æ–≥–ª–∞—à–µ–Ω–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ.

‚Ä¢ –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–¥–∂–µ
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è "–∫–∞–∫ –µ—Å—Ç—å"
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è?
"""

        self.bot.send_message(
            message.chat.id,
            agreement_text,
            reply_markup=agreement_keyboard,
            parse_mode='HTML'
        )

    def help_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–¥–∂–µ.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/menu - –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç.
–ù–∞–ø—Ä–∏–º–µ—Ä: "–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞?" –∏–ª–∏ "–ö—Ç–æ –ø—Ä–µ–ø–æ–¥–∞—ë—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫—É?"
"""
        self.bot.send_message(message.chat.id, help_text, parse_mode='HTML')

    def terms_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /terms"""
        try:
            with open('src/agreements/User Agreement.txt', 'rb') as doc:
                self.bot.send_document(
                    message.chat.id,
                    doc,
                    caption="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ"
                )
        except Exception as e:
            logger.error(f"Error sending agreement file: {e}")
            self.bot.send_message(
                message.chat.id,
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å–æ–≥–ª–∞—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    def license_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /license"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(
            types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
        )
        self.bot.send_message(
            message.chat.id,
            LICENSE_AGREEMENT,
            reply_markup=keyboard,
            parse_mode='HTML'
        )

    def menu_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = types.InlineKeyboardMarkup()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é
        keyboard.row(
            types.InlineKeyboardButton(MENU_BUTTONS['teachers'], callback_data='teachers'),
            types.InlineKeyboardButton(MENU_BUTTONS['schedule'], callback_data='schedule')
        )
        keyboard.row(
            types.InlineKeyboardButton(MENU_BUTTONS['resources'], callback_data='resources'),
            types.InlineKeyboardButton(MENU_BUTTONS['navigation'], callback_data='navigation')
        )
        keyboard.row(
            types.InlineKeyboardButton(MENU_BUTTONS['sections'], callback_data='sections'),
            types.InlineKeyboardButton(MENU_BUTTONS['dormitory'], callback_data='dormitory')
        )
        keyboard.row(
            types.InlineKeyboardButton(MENU_BUTTONS['events'], callback_data='events'),
            types.InlineKeyboardButton(MENU_BUTTONS['documents'], callback_data='documents')
        )
        keyboard.row(
            types.InlineKeyboardButton(MENU_BUTTONS['faq'], callback_data='faq')
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        self.bot.send_message(
            message.chat.id,
            WELCOME_MESSAGE,
            reply_markup=keyboard,
            parse_mode='HTML'
        )

    def handle_button(self, call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
        callback_data = call.data
        user_id = call.from_user.id

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É —Å callback_data: {callback_data}")

        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if callback_data == 'back_to_menu':
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_id in self.user_states:
                    del self.user_states[user_id]

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                keyboard = types.InlineKeyboardMarkup()

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é
                keyboard.row(
                    types.InlineKeyboardButton(MENU_BUTTONS['teachers'], callback_data='teachers'),
                    types.InlineKeyboardButton(MENU_BUTTONS['schedule'], callback_data='schedule')
                )
                keyboard.row(
                    types.InlineKeyboardButton(MENU_BUTTONS['resources'], callback_data='resources'),
                    types.InlineKeyboardButton(MENU_BUTTONS['navigation'], callback_data='navigation')
                )
                keyboard.row(
                    types.InlineKeyboardButton(MENU_BUTTONS['sections'], callback_data='sections'),
                    types.InlineKeyboardButton(MENU_BUTTONS['dormitory'], callback_data='dormitory')
                )
                keyboard.row(
                    types.InlineKeyboardButton(MENU_BUTTONS['events'], callback_data='events'),
                    types.InlineKeyboardButton(MENU_BUTTONS['documents'], callback_data='documents')
                )
                keyboard.row(
                    types.InlineKeyboardButton(MENU_BUTTONS['faq'], callback_data='faq')
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=WELCOME_MESSAGE,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤
            if callback_data == 'teachers':
                self.handle_teachers(call)
            elif callback_data == 'schedule':
                self.handle_schedule(call)
            elif callback_data == 'resources':
                self.handle_resources(call)
            elif callback_data == 'navigation':
                self.handle_navigation(call)
            elif callback_data == 'sections':
                self.handle_sections(call)
            elif callback_data == 'dormitory':
                self.handle_dormitory(call)
            elif callback_data == 'events':
                self.handle_events(call)
            elif callback_data == 'documents':
                self.handle_documents(call)
            elif callback_data == 'faq':
                self.handle_faq(call)
            elif callback_data == 'terms':
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
                keyboard = types.InlineKeyboardMarkup()
                keyboard.row(
                    types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_menu')
                )
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=USER_AGREEMENT,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            elif callback_data.startswith('faq_page_'):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è FAQ
                try:
                    page_num = int(callback_data.split('_')[-1])
                    self.handle_faq(call, page=page_num)
                except (ValueError, IndexError) as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã FAQ: {e}")
                    self.handle_faq(call, page=0)
            elif callback_data.startswith('teacher_page_'):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
                try:
                    # –§–æ—Ä–º–∞—Ç: teacher_page_–Ω–æ–º–µ—Ä-—Å—Ç—Ä–∞–Ω–∏—Ü—ã_–ø–æ–∏—Å–∫–æ–≤—ã–π-–∑–∞–ø—Ä–æ—Å
                    parts = callback_data.split('_', 3)
                    if len(parts) >= 3:
                        page_num = int(parts[2])
                        search_text = parts[3] if len(parts) > 3 else ""
                        self.show_teacher_page(call, page_num, search_text)
                    else:
                        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º: {callback_data}")
                except (ValueError, IndexError) as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {e}")
            elif callback_data == 'teacher_search':
                self.handle_teacher_search(call)
            elif callback_data.startswith('teacher_'):
                teacher_id = callback_data.split('_')[1]
                self.show_teacher_info(call, teacher_id)
            elif callback_data == 'accept_agreement':
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                keyboard = types.InlineKeyboardMarkup()

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é
                keyboard.row(
                    types.InlineKeyboardButton(MENU_BUTTONS['teachers'], callback_data='teachers'),
                    types.InlineKeyboardButton(MENU_BUTTONS['schedule'], callback_data='schedule')
                )
                keyboard.row(
                    types.InlineKeyboardButton(MENU_BUTTONS['resources'], callback_data='resources'),
                    types.InlineKeyboardButton(MENU_BUTTONS['navigation'], callback_data='navigation')
                )
                keyboard.row(
                    types.InlineKeyboardButton(MENU_BUTTONS['sections'], callback_data='sections'),
                    types.InlineKeyboardButton(MENU_BUTTONS['dormitory'], callback_data='dormitory')
                )
                keyboard.row(
                    types.InlineKeyboardButton(MENU_BUTTONS['events'], callback_data='events'),
                    types.InlineKeyboardButton(MENU_BUTTONS['documents'], callback_data='documents')
                )
                keyboard.row(
                    types.InlineKeyboardButton(MENU_BUTTONS['faq'], callback_data='faq')
                )

                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.",
                    parse_mode='HTML'
                )

                # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                self.bot.send_message(
                    chat_id=call.message.chat.id,
                    text=WELCOME_MESSAGE,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            elif callback_data == 'decline_agreement':
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ –ø—Ä–∏–Ω—è—Ç–∏—è —É—Å–ª–æ–≤–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø—Ä–∏–º–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
                    parse_mode='HTML'
                )
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {callback_data}")
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                    parse_mode='HTML'
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ {callback_data}: {e}")
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='HTML'
            )

    def handle_text_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
        text = sanitize_input(message.text)
        user_id = message.from_user.id

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        if user_id in self.user_states and self.user_states[user_id] == 'waiting_for_teacher_name':
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É NLP")
            return

        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ NLP
            response = self.nlp.process_query(text.lower(), self.db)

            if response:
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç NLP, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                logger.info(f"Sending NLP response to user {user_id}")

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu'))

                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                message_parts = split_long_message(response, 4000)

                for part in message_parts:
                    self.bot.send_message(
                        message.chat.id,
                        part,
                        reply_markup=keyboard,
                        parse_mode='HTML'
                    )
            else:
                # –ï—Å–ª–∏ NLP –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
                logger.info(f"No NLP response, showing generic message to user {user_id}")

                keyboard = types.InlineKeyboardMarkup()
                keyboard.row(
                    types.InlineKeyboardButton(MENU_BUTTONS['teachers'], callback_data='teachers'),
                    types.InlineKeyboardButton(MENU_BUTTONS['schedule'], callback_data='schedule')
                )
                keyboard.row(
                    types.InlineKeyboardButton(MENU_BUTTONS['resources'], callback_data='resources'),
                    types.InlineKeyboardButton(MENU_BUTTONS['navigation'], callback_data='navigation')
                )
                keyboard.row(
                    types.InlineKeyboardButton(MENU_BUTTONS['faq'], callback_data='faq')
                )

                self.bot.send_message(
                    message.chat.id,
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å "
                    "–∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é:",
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è '{text}': {e}")
            self.bot.send_message(
                message.chat.id,
                ERROR_MESSAGES['nlp_error']
            )

    # –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
    def handle_teachers(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = call.from_user.id
        if user_id in self.user_states:
            del self.user_states[user_id]

        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(
            types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏", callback_data='teacher_search')
        )
        keyboard.row(
            types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
        )

        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üë®‚Äçüè´ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö –∫–æ–ª–ª–µ–¥–∂–∞ –ø–æ —Ñ–∞–º–∏–ª–∏–∏.",
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.send_message(
                chat_id=call.message.chat.id,
                text="üë®‚Äçüè´ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö –∫–æ–ª–ª–µ–¥–∂–∞ –ø–æ —Ñ–∞–º–∏–ª–∏–∏.",
                reply_markup=keyboard,
                parse_mode='HTML'
            )



    def handle_schedule(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(
            types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
        )

        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üïí <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π</b>\n\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ –∫–æ–ª–ª–µ–¥–∂–∞: https://pfek.ru/schedule/",
            reply_markup=keyboard,
            parse_mode='HTML'
        )

    def handle_resources(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–ª–µ–∑–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(
            types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
        )

        resources_text = """üîó <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã</b>

<b>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∫–æ–ª–ª–µ–¥–∂–∞:</b>
‚Ä¢ –°–∞–π—Ç –∫–æ–ª–ª–µ–¥–∂–∞: https://pfek.ru/
‚Ä¢ –ì—Ä—É–ø–ø–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: https://vk.com/pfekperm
‚Ä¢ –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: https://t.me/pfekperm

<b>–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:</b>
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: https://pfek.ru/library/
‚Ä¢ –£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: https://pfek.ru/students/
"""

        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=resources_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )

    def handle_navigation(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–ª–µ–¥–∂—É"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(
            types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
        )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        navigations = self.db.get_navigation()

        if not navigations:
            text = "üè¢ <b>–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–æ–ª–ª–µ–¥–∂—É</b>\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–π –∏ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        else:
            text = "üè¢ <b>–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–æ–ª–ª–µ–¥–∂—É</b>\n\n"
            for nav in navigations[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–µ –ø–æ–ª—è - –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
                location = nav[1] if len(nav) > 1 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ"
                description = nav[2] if len(nav) > 2 else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                text += f"<b>{location}</b>: {description}\n\n"

        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )

    def handle_sections(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–µ–∫—Ü–∏–π"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(
            types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
        )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∫—Ü–∏—è—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        sections = self.db.get_sections()

        if not sections:
            text = "üèÜ <b>–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏</b>\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–µ–∫—Ü–∏—è—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        else:
            text = "üèÜ <b>–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏</b>\n\n"
            for section in sections:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–µ –ø–æ–ª—è - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ç—Ä–µ–Ω–µ—Ä
                name = section[1] if len(section) > 1 else "–°–µ–∫—Ü–∏—è –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                schedule = section[2] if len(section) > 2 else "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                coach = section[3] if len(section) > 3 else "–¢—Ä–µ–Ω–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω"

                text += f"<b>{name}</b>\n"
                text += f"üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {schedule}\n"
                text += f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {coach}\n\n"

        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )

    def handle_dormitory(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—â–µ–∂–∏—Ç–∏—è—Ö"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(
            types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
        )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—â–µ–∂–∏—Ç–∏—è—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        dorms = self.db.get_dormitories()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—â–µ–∂–∏—Ç–∏—è—Ö: {dorms}")

        if not dorms:
            text = "üè† <b>–û–±—â–µ–∂–∏—Ç–∏—è</b>\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—â–µ–∂–∏—Ç–∏—è—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        else:
            text = "üè† <b>–û–±—â–µ–∂–∏—Ç–∏—è</b>\n\n"
            for dorm in dorms:
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã: id, number, warden, address, phone, info
                number = dorm[1] if len(dorm) > 1 else "–ù–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω"
                warden = dorm[2] if len(dorm) > 2 else "–ö–æ–º–µ–Ω–¥–∞–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω"
                address = dorm[3] if len(dorm) > 3 else "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω"
                phone = dorm[4] if len(dorm) > 4 else "–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω"
                info = dorm[5] if len(dorm) > 5 else ""

                text += f"<b>–û–±—â–µ–∂–∏—Ç–∏–µ ‚Ññ{number}</b>\n"
                text += f"üë§ –ö–æ–º–µ–Ω–¥–∞–Ω—Ç: {warden}\n"
                text += f"üìç –ê–¥—Ä–µ—Å: {address}\n"
                text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                if info:
                    text += f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {info}\n"
                text += "\n"

        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )

    def handle_events(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(
            types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
        )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        events = self.db.get_events()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö: {events}")

        if not events:
            text = "üéâ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        else:
            text = "üéâ <b>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>\n\n"
            for event in events:
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã: id, date, title, location
                date = event[1] if len(event) > 1 else "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                title = event[2] if len(event) > 2 else "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                location = event[3] if len(event) > 3 else "–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

                text += f"<b>{title}</b>\n"
                text += f"üìÖ –î–∞—Ç–∞: {date}\n"
                text += f"üìç –ú–µ—Å—Ç–æ: {location}\n\n"

        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )

    def handle_documents(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(
            types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
        )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        docs = self.db.get_documents()

        if not docs:
            text = "üìÑ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã</b>\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        else:
            text = "üìÑ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã</b>\n\n"
            for doc in docs:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª—è - –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—Å—ã–ª–∫–∞
                name = doc[1] if len(doc) > 1 else "–î–æ–∫—É–º–µ–Ω—Ç"
                description = doc[2] if len(doc) > 2 else "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
                link = doc[3] if len(doc) > 3 else None

                text += f"<b>{name}</b>\n"
                text += f"{description}\n"
                if link:
                    text += f"üîó <a href='{link}'>–°–∫–∞—á–∞—Ç—å</a>\n"
                text += "\n"

        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )

    def handle_agreements(self, call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(
            types.InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", callback_data='terms')
        )
        keyboard.row(
            types.InlineKeyboardButton("–õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", callback_data='license')
        )
        keyboard.row(
            types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
        )

        text = "üìã <b>–°–æ–≥–ª–∞—à–µ–Ω–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"

        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )

    def handle_faq(self, call, page=0):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        # –ü–æ–ª—É—á–∞–µ–º FAQ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        faqs = self.db.get_faq()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã FAQ: {len(faqs) if faqs else 0} –∑–∞–ø–∏—Å–µ–π")

        if not faqs:
            text = "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n–†–∞–∑–¥–µ–ª —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç."
            keyboard = types.InlineKeyboardMarkup()
            keyboard.row(
                types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
            )
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        faqs_per_page = 3  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 3 –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        total_pages = (len(faqs) + faqs_per_page - 1) // faqs_per_page  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        if page < 0:
            page = 0
        elif page >= total_pages:
            page = total_pages - 1

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = page * faqs_per_page
        end_idx = min(start_idx + faqs_per_page, len(faqs))

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = types.InlineKeyboardMarkup()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        nav_buttons = []
        if page > 0:
            nav_buttons.append(types.InlineKeyboardButton("¬´ –ü—Ä–µ–¥.", callback_data=f'faq_page_{page-1}'))

        nav_buttons.append(types.InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data='faq'))

        if page < total_pages - 1:
            nav_buttons.append(types.InlineKeyboardButton("–°–ª–µ–¥. ¬ª", callback_data=f'faq_page_{page+1}'))

        if nav_buttons:
            keyboard.row(*nav_buttons)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard.row(
            types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        text = f"‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1} –∏–∑ {total_pages})</b>\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for i in range(start_idx, end_idx):
            faq = faqs[i]
            question = faq[1] if len(faq) > 1 else "–í–æ–ø—Ä–æ—Å"
            answer = faq[2] if len(faq) > 2 else "–û—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if len(answer) > 300:
                answer = answer[:297] + "..."

            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text += f"<b>–í–æ–ø—Ä–æ—Å {i+1}:</b> {question}\n"
            text += f"<b>–û—Ç–≤–µ—Ç:</b> {answer}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if page == total_pages - 1:
            text += "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –∫–æ–ª–ª–µ–¥–∂–∞."

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ FAQ: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ
            try:
                self.bot.send_message(
                    chat_id=call.message.chat.id,
                    text=text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            except Exception as send_err:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å FAQ –¥–∞–∂–µ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º: {send_err}")
                # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                text = "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"
                text += "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä –∫–æ–ª–ª–µ–¥–∂–∞."
                self.bot.send_message(
                    chat_id=call.message.chat.id,
                    text=text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )

    def handle_teacher_search(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
        user_id = call.from_user.id

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        self.user_states[user_id] = 'waiting_for_teacher_name'

        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(
            types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º", callback_data='teachers'),
            types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
        )

        text = ("üîç <b>–ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
               "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–µ —á–∞—Å—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: \"–°—Ç–∞–≤–∏—Ü–∫–∞—è\" –∏–ª–∏ \"–ë–æ—á–∞—Ä–æ–≤\"")

        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        self.bot.register_next_step_handler(call.message, self.process_teacher_search_query)

    def show_teacher_page(self, call, page, search_text):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            teachers = self.db.get_teachers(search_text)
            logger.debug(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_text}': {teachers}")
            
            keyboard = types.InlineKeyboardMarkup()
            
            if not teachers:
                text = (f"üîç <b>–ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                       f"–ü–æ –∑–∞–ø—Ä–æ—Å—É \"{search_text}\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                       f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.")
                       
                keyboard.row(
                    types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data='teacher_search'),
                    types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
                )
                
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                return
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
            text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{search_text}\"</b>\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            unique_teachers = {}
            
            for teacher in teachers:
                teacher_id = teacher[0]
                surname = teacher[1] if len(teacher) > 1 else ""
                first_name = teacher[2] if len(teacher) > 2 else ""
                middle_name = teacher[3] if len(teacher) > 3 else ""
                position = teacher[4] if len(teacher) > 4 else ""
                cabinet = teacher[5] if len(teacher) > 5 else ""
                photo = teacher[6] if len(teacher) > 6 else None
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –§–ò–û
                full_name = f"{surname} {first_name} {middle_name}".strip()
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –¥–ª—è –∞–±—Å–æ–ª—é—Ç–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                unique_teachers[teacher_id] = {
                    'id': teacher_id,
                    'full_name': full_name,
                    'surname': surname,
                    'position': position,
                    'cabinet': cabinet,
                    'photo': photo
                }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
            text += f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {len(unique_teachers)}\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º:"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            sorted_teachers = sorted(unique_teachers.values(), key=lambda x: x['full_name'])
            
            # –†–µ–∞–ª–∏–∑—É–µ–º –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            TEACHERS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            total_pages = (len(sorted_teachers) + TEACHERS_PER_PAGE - 1) // TEACHERS_PER_PAGE
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if page < 0:
                page = 0
            elif page >= total_pages:
                page = total_pages - 1
                
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∏—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            start_idx = page * TEACHERS_PER_PAGE
            end_idx = min(start_idx + TEACHERS_PER_PAGE, len(sorted_teachers))
            current_page_teachers = sorted_teachers[start_idx:end_idx]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            for teacher_data in current_page_teachers:
                button_text = f"{teacher_data['full_name']}"
                if teacher_data['position'] and not teacher_data['position'].isdigit():
                    button_text += f" ({teacher_data['position']})"
                elif teacher_data['cabinet']:
                    button_text += f" (–∫–∞–±. {teacher_data['cabinet']})"
                
                keyboard.row(
                    types.InlineKeyboardButton(button_text, callback_data=f'teacher_{teacher_data["id"]}')
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            nav_buttons = []
            
            # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞" (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
            if page > 0:
                nav_buttons.append(types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f'teacher_page_{page-1}_{search_text}'))
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            nav_buttons.append(types.InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="ignore"))
            
            # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞" (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
            if page < total_pages - 1:
                nav_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ¬ª", callback_data=f'teacher_page_{page+1}_{search_text}'))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if total_pages > 1:
                keyboard.row(*nav_buttons)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
            keyboard.row(
                types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data='teacher_search'),
                types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"Error in show_teacher_page: {e}")
            try:
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode='HTML'
                )
            except:
                self.bot.send_message(
                    chat_id=call.message.chat.id,
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode='HTML'
                )
    
    def process_teacher_search_query(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
        search_text = sanitize_input(message.text)
        user_id = message.from_user.id

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        if user_id in self.user_states:
            del self.user_states[user_id]

        logger.info(f"Received teacher search query from user {user_id}: {search_text}")

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
            teachers = self.db.get_teachers(search_text)
            logger.debug(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_text}': {teachers}")

            keyboard = types.InlineKeyboardMarkup()
            keyboard.row(
                types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data='teacher_search'),
                types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
            )

            if not teachers:
                text = (f"üîç <b>–ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                       f"–ü–æ –∑–∞–ø—Ä–æ—Å—É \"{search_text}\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                       f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.")

                self.bot.send_message(
                    message.chat.id,
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
            text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{search_text}\"</b>\n\n"

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            unique_teachers = {}

            for teacher in teachers:
                teacher_id = teacher[0]
                surname = teacher[1] if len(teacher) > 1 else ""
                first_name = teacher[2] if len(teacher) > 2 else ""
                middle_name = teacher[3] if len(teacher) > 3 else ""
                position = teacher[4] if len(teacher) > 4 else ""
                cabinet = teacher[5] if len(teacher) > 5 else ""
                photo = teacher[6] if len(teacher) > 6 else None

                # –§–æ—Ä–º–∏—Ä—É–µ–º –§–ò–û
                full_name = f"{surname} {first_name} {middle_name}".strip()

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –¥–ª—è –∞–±—Å–æ–ª—é—Ç–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                unique_teachers[teacher_id] = {
                    'id': teacher_id,
                    'full_name': full_name,
                    'surname': surname,
                    'position': position,
                    'cabinet': cabinet,
                    'photo': photo
                }

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
            text += f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {len(unique_teachers)}\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º:"

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            sorted_teachers = sorted(unique_teachers.values(), key=lambda x: x['full_name'])
            
            # –†–µ–∞–ª–∏–∑—É–µ–º –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            TEACHERS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            page = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            total_pages = (len(sorted_teachers) + TEACHERS_PER_PAGE - 1) // TEACHERS_PER_PAGE
            
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∏—Ç–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            start_idx = page * TEACHERS_PER_PAGE
            end_idx = min(start_idx + TEACHERS_PER_PAGE, len(sorted_teachers))
            current_page_teachers = sorted_teachers[start_idx:end_idx]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            for teacher_data in current_page_teachers:
                button_text = f"{teacher_data['full_name']}"
                if teacher_data['position'] and not teacher_data['position'].isdigit():
                    button_text += f" ({teacher_data['position']})"
                elif teacher_data['cabinet']:
                    button_text += f" (–∫–∞–±. {teacher_data['cabinet']})"
                
                keyboard.row(
                    types.InlineKeyboardButton(button_text, callback_data=f'teacher_{teacher_data["id"]}')
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            nav_buttons = []
            
            # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞" (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
            if page > 0:
                nav_buttons.append(types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f'teacher_page_{page-1}_{search_text}'))
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            nav_buttons.append(types.InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="ignore"))
            
            # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞" (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
            if page < total_pages - 1:
                nav_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ¬ª", callback_data=f'teacher_page_{page+1}_{search_text}'))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if total_pages > 1:
                keyboard.row(*nav_buttons)
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            self.bot.send_message(
                message.chat.id,
                text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )

        except Exception as e:
            logger.error(f"Error in process_teacher_search_query: {e}")
            self.bot.send_message(
                message.chat.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='HTML'
            )

    def show_teacher_info(self, call, teacher_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            query = "SELECT * FROM Prepodavately WHERE id = ?"
            teachers = self.db.execute_query(query, (teacher_id,))
            logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_id}: {teachers}")

            if not teachers:
                self.bot.answer_callback_query(call.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                logger.warning(f"Teacher with ID {teacher_id} not found")
                return

            teacher = teachers[0]
            
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if call.from_user.id in self.teacher_display_messages:
                try:
                    self.bot.delete_message(
                        chat_id=call.message.chat.id,
                        message_id=self.teacher_display_messages[call.from_user.id]
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ: {e}")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = types.InlineKeyboardMarkup()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard.row(
                types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data='teachers'),
                types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
            )

            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã: id, –§–∞–º–∏–ª–∏—è, –ò–º—è, –û—Ç—á–µ—Å—Ç–≤–æ, –î–æ–ª–∂–Ω–æ—Å—Ç—å, –ö–∞–±–∏–Ω–µ—Ç, –§–æ—Ç–æ
            surname = teacher[1] if len(teacher) > 1 else ""
            first_name = teacher[2] if len(teacher) > 2 else ""
            middle_name = teacher[3] if len(teacher) > 3 else ""
            position = teacher[4] if len(teacher) > 4 else ""
            cabinet = teacher[5] if len(teacher) > 5 else ""
            photo = teacher[6] if len(teacher) > 6 else None

            # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
            disciplines_list = self.db.get_teacher_disciplines(teacher_id)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_id}: {len(disciplines_list)} —à—Ç.")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –§–ò–û
            full_name = f"{surname} {first_name} {middle_name}".strip()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
            text = f"üìã <b>–ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b>\n\n"
            text += f"üë®‚Äçüè´ <b>–§–ò–û:</b> {full_name}\n"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ position –Ω–æ–º–µ—Ä–æ–º –∫–∞–±–∏–Ω–µ—Ç–∞ (—á–∞—Å—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ)
            if position and position.isdigit():
                cabinet = position  # –ò—Å–ø–æ–ª—å–∑—É–µ–º position –∫–∞–∫ cabinet
                position = None     # –û—á–∏—â–∞–µ–º position
            
            if position:
                text += f"üßë‚Äçüíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {position}\n"

            if cabinet:
                text += f"üö™ <b>–ö–∞–±–∏–Ω–µ—Ç:</b> {cabinet}\n"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏–∑ –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if disciplines_list:
                from src.utils import format_teacher_disciplines
                formatted_disciplines = format_teacher_disciplines(disciplines_list)
                if formatted_disciplines:
                    text += f"\nüìö <b>–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:</b>\n{formatted_disciplines}\n"
                else:
                    text += f"\nüìö <b>–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:</b> –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
            else:
                text += f"\nüìö <b>–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:</b> –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ
            has_photo = photo is not None and len(photo) > 100

            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            from src.utils import split_long_message
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not has_photo:
                logger.warning(f"–§–æ—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {surname} (ID: {teacher_id}) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
                # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                message_parts = split_long_message(text, 4000)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                for i, part in enumerate(message_parts):
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫–∏
                    if i == len(message_parts) - 1:
                        self.bot.edit_message_text(
                            chat_id=call.message.chat.id,
                            message_id=call.message.message_id,
                            text=part,
                            reply_markup=keyboard,
                            parse_mode='HTML'
                        )
                    else:
                        self.bot.send_message(
                            call.message.chat.id,
                            part,
                            parse_mode='HTML'
                        )
                return
            
            # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            logger.info(f"–§–æ—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {surname} –Ω–∞–π–¥–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä: {len(photo)} –±–∞–π—Ç")
            
            try:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
                self.bot.delete_message(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id
                )
                logger.info(f"–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
            except Exception as del_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {del_error}")
            
            try:
                import io
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BytesIO –∏–∑ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                photo_bytes = io.BytesIO(photo)
                photo_bytes.seek(0)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤ - –º–∞–∫—Å–∏–º—É–º –¥–ª—è caption)
                caption = text
                if len(caption) > 1000:
                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º,
                    # –∞ –∑–∞—Ç–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
                    caption = f"üìã <b>–ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b>\n\nüë®‚Äçüè´ <b>–§–ò–û:</b> {full_name}"
                    if position:
                        caption += f"\nüßë‚Äçüíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {position}"
                    if cabinet:
                        caption += f"\nüö™ <b>–ö–∞–±–∏–Ω–µ—Ç:</b> {cabinet}"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
                    self.bot.send_photo(
                        chat_id=call.message.chat.id,
                        photo=photo_bytes,
                        caption=caption,
                        parse_mode='HTML'
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    self.bot.send_message(
                        chat_id=call.message.chat.id,
                        text=text,
                        reply_markup=keyboard,
                        parse_mode='HTML'
                    )
                else:
                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ caption, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ
                    message = self.bot.send_photo(
                        chat_id=call.message.chat.id,
                        photo=photo_bytes,
                        caption=caption,
                        reply_markup=keyboard,
                        parse_mode='HTML'
                    )
                    
                    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                    self.teacher_display_messages[call.from_user.id] = message.message_id
                
                logger.info(f"–§–æ—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {surname} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                
            except Exception as send_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {send_error}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.bot.send_message(
                    chat_id=call.message.chat.id,
                    text=text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )

            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ {teacher[1]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {call.from_user.id}")

        except Exception as e:
            logger.error(f"Error in show_teacher_info: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode='HTML'
                )
            except:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                self.bot.send_message(
                    chat_id=call.message.chat.id,
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode='HTML'
                )

    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        try:
            self.db.execute_query("SELECT 1")
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            sys.exit(1)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.bot.infinity_polling()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        if not TOKEN:
            logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TOKEN. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ —Ñ–∞–π–ª–µ constants.py")
            sys.exit(1)

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = CollegeBot(TOKEN)
        bot.start()

    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()